# Generated by Django 4.2.5 on 2023-09-28 03:13

import django.contrib.auth.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone
import main_and_user.models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ("auth", "0012_alter_user_first_name_max_length"),
    ]

    operations = [
        migrations.CreateModel(
            name="Blog",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("title", models.CharField(max_length=300)),
                ("text", models.TextField()),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True, null=True)),
                ("genre", models.CharField(blank=True, max_length=500, null=True)),
                (
                    "image_01",
                    models.ImageField(
                        blank=True, null=True, upload_to="media/main_and_user/blog/"
                    ),
                ),
                (
                    "image_02",
                    models.ImageField(
                        blank=True, null=True, upload_to="media/main_and_user/blog/"
                    ),
                ),
                (
                    "image_03",
                    models.ImageField(
                        blank=True, null=True, upload_to="media/main_and_user/blog/"
                    ),
                ),
                (
                    "image_04",
                    models.ImageField(
                        blank=True, null=True, upload_to="media/main_and_user/blog/"
                    ),
                ),
            ],
            options={
                "ordering": ("created_at",),
            },
        ),
        migrations.CreateModel(
            name="Genre",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("title", models.CharField(max_length=300)),
                ("text", models.TextField()),
                (
                    "image_01",
                    models.ImageField(
                        blank=True, null=True, upload_to="media/main_and_user/genre/"
                    ),
                ),
                (
                    "image_02",
                    models.ImageField(
                        blank=True, null=True, upload_to="media/main_and_user/genre/"
                    ),
                ),
                (
                    "image_03",
                    models.ImageField(
                        blank=True, null=True, upload_to="media/main_and_user/genre/"
                    ),
                ),
                (
                    "image_04",
                    models.ImageField(
                        blank=True, null=True, upload_to="media/main_and_user/genre/"
                    ),
                ),
            ],
            options={
                "ordering": ("id",),
            },
        ),
        migrations.CreateModel(
            name="Post",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("title", models.CharField(max_length=300)),
                ("text", models.TextField()),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True, null=True)),
                ("song_published_at", models.DateField(blank=True, null=True)),
                ("category", models.CharField(max_length=500)),
                ("genre", models.CharField(max_length=500)),
                (
                    "image_01",
                    models.ImageField(
                        blank=True, null=True, upload_to="media/main_and_user/post/"
                    ),
                ),
                (
                    "image_02",
                    models.ImageField(
                        blank=True, null=True, upload_to="media/main_and_user/post/"
                    ),
                ),
                (
                    "image_03",
                    models.ImageField(
                        blank=True, null=True, upload_to="media/main_and_user/post/"
                    ),
                ),
                (
                    "image_04",
                    models.ImageField(
                        blank=True, null=True, upload_to="media/main_and_user/post/"
                    ),
                ),
            ],
            options={
                "ordering": ("created_at",),
            },
        ),
        migrations.CreateModel(
            name="Comment",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("name", models.CharField(blank=True, max_length=50, null=True)),
                ("title", models.CharField(max_length=100)),
                ("text", models.TextField()),
                ("posted_at", models.DateTimeField(auto_now_add=True)),
                (
                    "blog",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="main_and_user.blog",
                    ),
                ),
            ],
            options={
                "ordering": ("id",),
            },
        ),
        migrations.CreateModel(
            name="User",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("password", models.CharField(max_length=128, verbose_name="password")),
                (
                    "last_login",
                    models.DateTimeField(
                        blank=True, null=True, verbose_name="last login"
                    ),
                ),
                (
                    "username",
                    models.CharField(
                        max_length=100,
                        validators=[
                            django.contrib.auth.validators.UnicodeUsernameValidator()
                        ],
                        verbose_name="username",
                    ),
                ),
                (
                    "email",
                    models.EmailField(
                        max_length=254, unique=True, verbose_name="email_address"
                    ),
                ),
                (
                    "is_superuser",
                    models.BooleanField(default=False, verbose_name="superuser status"),
                ),
                (
                    "is_staff",
                    models.BooleanField(default=False, verbose_name="staff status"),
                ),
                ("is_active", models.BooleanField(default=True, verbose_name="active")),
                (
                    "date_joined",
                    models.DateTimeField(
                        default=django.utils.timezone.now, verbose_name="date joined"
                    ),
                ),
                (
                    "groups",
                    models.ManyToManyField(
                        blank=True,
                        help_text="The groups this user belongs to. A user will get all permissions granted to each of their groups.",
                        related_name="user_set",
                        related_query_name="user",
                        to="auth.group",
                        verbose_name="groups",
                    ),
                ),
                (
                    "user_permissions",
                    models.ManyToManyField(
                        blank=True,
                        help_text="Specific permissions for this user.",
                        related_name="user_set",
                        related_query_name="user",
                        to="auth.permission",
                        verbose_name="user permissions",
                    ),
                ),
            ],
            options={
                "abstract": False,
            },
            managers=[
                ("objects", main_and_user.models.UserManager()),
            ],
        ),
    ]
